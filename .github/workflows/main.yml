name: Build and Release Electron App

on:
  push:
    branches:
      - main
      - release
      - feature/add-github-actions-workflow

jobs:
  mac-linux-build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - os: macos
            platform: darwin
          - os: ubuntu
            platform: linux

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm install

      # ここにテストが入る

      - name: Package Electron app
        run: npm run make -- --platform ${{ matrix.platform }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-build
          path: |
            out/make/**/*

  windows-build:
    runs-on: windows-2019

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm install

      # ここにテストが入る

      - name: Package Electron app
        run: npm run make -- --platform win32

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: |
            out/make/**/*

  update-wiki:
    needs:
      - mac-linux-build
      - windows-build

    runs-on: ubuntu-latest

    steps:
      - name: Update Wiki with artifact URLs
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const wikiPage = 'Artifact-URLs.md';
            let wikiContent = '';
            let sha = null;

            try {
              const response = await github.rest.repos.getContent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: wikiPage,
              });
              wikiContent = Buffer.from(response.data.content, 'base64').toString();
              sha = response.data.sha;
            } catch (error) {
              if (error.status !== 404) {
                throw error;
              }
            }

            const platforms = ['darwin', 'linux', 'win32'];
            for (const platform of platforms) {
              const artifactName = `${platform}-build`;
              const artifactUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}#artifacts`;
              const regex = new RegExp(`\\[${platform}\\]\\(.*\\)`, 'gm');
              const newLine = `[${platform}](${artifactUrl})`;

              if (regex.test(wikiContent)) {
                wikiContent = wikiContent.replace(regex, newLine);
              } else {
                wikiContent += `\n${newLine}`;
              }
            }

            await github.rest.repos.createOrUpdateFileContents({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: wikiPage,
              message: 'Update artifact URLs in wiki',
              content: Buffer.from(wikiContent).toString('base64'),
              sha: sha,
            });
